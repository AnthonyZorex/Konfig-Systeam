@model schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder;

@{
    ViewData["Title"] = "Edit";
    int count = -1;
    int f = -1;
    int r = -1;
}

@if (User.IsInRole("admin"))
{
    <h1>Edit Halbzylinder</h1>
    <h4>@Model.Artikelnummer</h4>
    <hr />
    <div class="row">
        <div class="col-md-12">
            <form asp-action="SaveHalbzylinder">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                @Html.HiddenFor(x => x.Id)
                <div class="form-group">

                    <input id="VorhanType" asp-for="schliessanlagenId" type="hidden" class="form-control" />
                </div>
                <div class="form-group">
                    <label asp-for="companyName" class="control-label"></label>
                    <input required asp-for="companyName" class="form-control" />
                    <span asp-validation-for="companyName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="NameSystem" class="control-label"></label>
                    <input required asp-for="NameSystem" class="form-control" />
                    <span asp-validation-for="NameSystem" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="description" class="control-label"></label>
                    <textarea asp-for="description" required class="form-control" id="exampleFormControlTextarea1"></textarea>
                    <span asp-validation-for="description" class="text-danger"></span>
                </div>
               
                <div class="form-group">
                    <label asp-for="Price" class="control-label"></label>
                    <input asp-for="Price" type="number" step="0.001" class="form-control" />
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="ImageName" class="control-label"></label>
                    <input asp-for="ImageName" class="form-control" />
                    <span asp-validation-for="ImageName" class="text-danger"></span>
                </div>
                <label asp-for="ImageFile" class="control-label"></label>
                <hr />
                <h1>Aussen <input id="addAussen_Innen" class="btn btn-success" type="button" value="+" /><input id="addAussen_Innen_remove" class="btn btn-danger" type="button" value="-" /></h1>
                <div id="Aussen_Innen_ProfilDopel">

                    <div id="AussenProfilDopel">
                        @foreach (var list in @ViewBag.Size)
                        {
                            <input class="form-control" name="Size" id="aus" value="@list.aussen" />
                            <input class="form-control" name="costSizeAussen" type="number" step="0.01" id="ausCost" value="@list.costAussen" />
                        }
                    </div>
                </div>

                <div id="productOptions">
                    @if (ViewBag.optionV == true)
                    {
                        @foreach (var options in ViewBag.Options)
                        {
                            r++;
                            <div class="input-block" id="block-@r">
                                <h2>Options</h2>
                                <div class="form-group">
                                    <label class="control-label">Options Name</label>
                                    <input name="Options" value="@options.Name" id="opt" class="form-control" />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Options Image</label>
                                    <input name="ImageNameOption" type="text" value="@options.ImageName" id="opt" class="form-control" />
                                    <br />
                                    <img src="@("/Image/"+@options.ImageName)" height="300" width="300" />
                                    <br />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Description</label>
                                    <textarea name="Descriptions" id="discriptions" class="form-control"> 
                                        @options.Description
                                    </textarea>
                                </div>

                                <h1>Value & Cost </h1>
                                <div id="Aussen_Innen_ProfilDopel">
                                    <div id="valueNGF" class="form-group">

                                        @for (int i = 0; i < ViewBag.CountOptions[r]; i++)
                                        {
                                            count++;
                                            <input type="text" placeholder="valueNGF" name="valueNGF" value="@ViewBag.OptionValue[count].Value" class="form-control" />
                                        }
                                    </div>
                                    <div class="form-group" id="costNGF">

                                        @for (int i = 0; i < ViewBag.CountOptions[r]; i++)
                                        {
                                            f++;
                                            <input type="text" placeholder="costNGF" name="costNGF" value="@ViewBag.OptionValue[f].Cost" class="form-control" />
                                        }
                                    </div>
                                    <input type="hidden" id="counter" name="inputCounter" />
                                </div>
                                <hr />
                                <br />
                                <button class="btn btn-danger" onclick="deleteOption(@r)" type="button">Löschen</button>
                                <hr />
                                <br />
                            </div>
                        }
                    }
                </div>
                <hr />
                <button id="createBlockBtn" type="button" class="btn btn-success">Add Options</button>
                <button id="addInputBtn" type="button" class="btn btn-success">+</button>
                <button id="RemoveInputBtn" type="button" class="btn btn-danger">-</button>
                <hr />
                <input type="submit" value="Save" class="btn btn-primary" />
            </form>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>

    @section Scripts 
    {
         @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script>

            function deleteOption(id) 
            {
                let optionBlock = document.getElementById("block-" + id);

                optionBlock.remove();
            }



            tinymce.init({
                selector: '#exampleFormControlTextarea1',
                plugins: [
                    'advlist', 'autolink', 'link', 'image', 'lists', 'charmap', 'preview', 'anchor', 'pagebreak',
                    'searchreplace', 'wordcount', 'visualblocks', 'visualchars', 'code', 'fullscreen', 'insertdatetime',
                    'media', 'table', 'emoticons', 'help'
                ],
                toolbar: 'undo redo | styles | bold italic | alignleft aligncenter alignright alignjustify | ' +
                    'bullist numlist outdent indent | link image | print preview media fullscreen | ' +
                    'forecolor backcolor emoticons | help',
                menu: {
                    favs: { title: 'Discriptions', items: 'code visualaid | searchreplace | emoticons' }
                },
                menubar: 'favs file edit view insert format tools table help',
                content_css: 'css/content.css'
            });
            tinymce.init({
                selector: '#discriptions',
                plugins: [
                    'advlist', 'autolink', 'link', 'image', 'lists', 'charmap', 'preview', 'anchor', 'pagebreak',
                    'searchreplace', 'wordcount', 'visualblocks', 'visualchars', 'code', 'fullscreen', 'insertdatetime',
                    'media', 'table', 'emoticons', 'help'
                ],
                toolbar: 'undo redo | styles | bold italic | alignleft aligncenter alignright alignjustify | ' +
                    'bullist numlist outdent indent | link image | print preview media fullscreen | ' +
                    'forecolor backcolor emoticons | help',
                menu: {
                    favs: { title: 'Optionen', items: 'code visualaid | searchreplace | emoticons' }
                },
                menubar: 'favs file edit view insert format tools table help',
                content_css: 'css/content.css'
            });

            let plusAussen_Innen = document.getElementById('addAussen_Innen');
            let removeAussen_Innen = document.getElementById('addAussen_Innen_remove');

            let docInnen = document.getElementById('InnenProfilDopel');
            let docAussen = document.getElementById('AussenProfilDopel');
            
            let selectedInputs = [];

            let allAussen = document.querySelectorAll("#aus");
            let aussenCost = document.querySelectorAll("#ausCost");

            allAussen.forEach((item) => {

                item.addEventListener("keydown", (event) => {
                    if (event.key === 'Control') {
                        selectedInputs.push(item);
                    }
                });


                item.addEventListener('change', (event) => {
                    selectedInputs.forEach((x) => {
                        x.value = event.target.value;
                    });
                    selectedInputs = [];
                });

            });


            aussenCost.forEach((item) => {

                item.addEventListener("keydown", (event) => {
                    item.addEventListener("click", () => {
                        selectedInputs.push(item);
                    })
                });


                item.addEventListener('change', (event) => {

                    selectedInputs.forEach((x) => {
                        x.value = event.target.value;
                    });
                    selectedInputs = [];
                });

            });

            window.addEventListener('load', function () {
                const blocks = document.querySelectorAll('.input-block');
                for (let i = 0; i < blocks.length; i++) {
                    let counterBlock = blocks[i].querySelectorAll("#valueNGF  input");

                    let counter = blocks[i].querySelectorAll("#counter");

                    counter[0].value = counterBlock.length;

                    console.log(counter[0].value);
                }
            });

            let costNGF = document.getElementById('costNGF');
            let valueNGF = document.getElementById('valueNGF');

            let productOptions = document.getElementById('productOptions');
            let addOptions = document.getElementById('addOptions');

            plusAussen_Innen.addEventListener('click', () => {

                let d = document.createElement('input');
                d.setAttribute('name', 'Size');
                d.setAttribute('placeholder', 'Size');
                d.setAttribute('class', 'form-control');
                d.id = 'aus';

                let costAussen = document.createElement('input');
                costAussen.setAttribute('name', 'costSizeAussen');
                costAussen.setAttribute('placeholder', 'costAussen');
                costAussen.setAttribute('class', 'form-control');
                costAussen.setAttribute('step', '0.01');
                costAussen.setAttribute('type', 'number');
                costAussen.id = 'ausCost';

                docAussen.append(d, costAussen);
            });
            removeAussen_Innen.addEventListener('click', () => {

                let d = document.querySelectorAll('#aus');
                let costAus = document.querySelectorAll("#ausCost");

                docAussen.removeChild(d[d.length - 1]);
                docAussen.removeChild(costAus[costAus.length - 1]);
            });

            document.addEventListener("DOMContentLoaded", function () {
                const container = document.getElementById('productOptions');
                const createBlockBtn = document.getElementById('createBlockBtn');
                const addInputBtn = document.getElementById('addInputBtn');
                const RemoveInputBtn = document.getElementById('RemoveInputBtn');

                let blockCounter = document.querySelectorAll('.input-block').length > 0 ? document.querySelectorAll('.input-block').length : 1;

                createBlockBtn.addEventListener('click', function () {
                    const block = createBlock();
                    container.appendChild(block);
                });

                addInputBtn.addEventListener('click', function () {
                    const blocks = document.querySelectorAll('.input-block');
                    const lastBlock = blocks[blocks.length - 1];

                    if (lastBlock) {
                        addInputs(lastBlock);
                    } else {
                        alert('Сначала создайте блок');
                    }
                });

                RemoveInputBtn.addEventListener('click', function () {
                    const blocks = document.querySelectorAll('.input-block');
                    const lastBlock = blocks[blocks.length - 1];

                    let inputProductValue = lastBlock.querySelectorAll("#valueNGF  input");
                    let inputProductPrice = lastBlock.querySelectorAll("#costNGF  input");

                    if (lastBlock) {
                        if (inputProductValue.length < 2) {
                            productOptions.removeChild(lastBlock);
                        }
                        else {
                            inputProductValue[inputProductValue.length - 1].parentNode.removeChild(inputProductValue[inputProductValue.length - 1]);
                            inputProductPrice[inputProductPrice.length - 1].parentNode.removeChild(inputProductPrice[inputProductPrice.length - 1]);
                        }
                    }
                    else {
                        alert('Сначала создайте блок');
                    }
                });

                function createBlock() 
                {
                    const block = document.createElement('div');
                    block.classList.add(`input-block`);
                    block.innerHTML = `<div>
                                                                                        <h1>Options</h1>
                                                                                        <label>Name</label>
                                                                                        <input class="form-control" type="text" name="Options" />
                                                                                        <div>
                                                                                            <p></p>
                                                                                            <input name="postedFile" type="file" class="btn btn-success" />
                                                                                            <p></p>
                                                                                        </div>
                                                                                        <label>Descriptions</label>
                                                                                        <input class="form-control" type="text" name="Descriptions" />
                                                                                        <h1>Value & Cost </h1>
                                                                                        <div id="Aussen_Innen_ProfilDopel">
                                                                                            <div id="valueNGF">
                                                                                                <input type="text" placeholder="valueNGF" class="form-control" name="valueNGF" />
                                                                                            </div>
                                                                                            <div id="costNGF">
                                                                                                <input type="number" placeholder="costNGF" class="form-control" step="0.01" name="costNGF" />
                                                                                            </div>
                                                                                                 <input type="hidden" id="counter" name="inputCounter" />
                                                                                        </div>
                                                                                    </div>
                                                                                                <hr/>
                                                                                      <br />
                                                                                         <button class="btn btn-danger" onclick="deleteOption(${blockCounter})" 	type="button">Löschen</button>
                                                                                      <hr />
                                                                                      <br />
                                                                                    `;

                    blockCounter++;

                    return block;
                }

                function addInputs(block) 
                {

                    let d = document.createElement('input');
                    d.setAttribute('name', 'costNGF');
                    d.setAttribute('placeholder', 'costNGF');
                    d.setAttribute('class', 'form-control');

                    let x = document.createElement('input');
                    x.setAttribute('name', 'valueNGF');
                    x.setAttribute('placeholder', 'valueNGF');
                    x.setAttribute('class', 'form-control');

                    const div1 = block.querySelector('#valueNGF');
                    const div2 = block.querySelector('#costNGF');

                    div1.appendChild(x);

                    div2.appendChild(d);

                    var counter = document.querySelectorAll('#counter');
                    counter[counter.length - 1].value = block.querySelectorAll("#valueNGF  input").length;
                };

            })

        </script>
    }
}

