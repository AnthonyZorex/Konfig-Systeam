@using schliessanlagen_konfigurator.Models.OrdersOpen
@model Orders;
@using Microsoft.AspNetCore.Http;

@{
    ViewData["Title"] = "Konfigurator";
}

<div>
    <div id="konfigMenu">
        <button type="button" class="btn danger">1. Schließplan erstellen</button>
        @if (User.IsInRole("client") || User.IsInRole("admin"))
        {
            <button type="button" class="btn btn-secondary"><a href="@Url.Action("System_Auswählen","Konfigurator",new{userName = @ViewBag.UserNameItem , isNewKonfig = true} )">2. System auswählen</a></button>
        }
        <button type="button" class="btn danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shopping-cart"><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                <title>Schop</title>
            </svg>
            <a asp-area="" asp-controller="Schop" asp-action="Index">Shop</a>
        </button>
    </div>
    <div style="display:flex;gap: 20px;box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;align-items: center;">
 @*        <button id="hilfeImg" style="border:none"><img src="/Image/help.png" data-bs-toggle="modal" data-bs-target="#hilfe" width="60" hight="60" /></button> *@
        <h2>Füllen Sie den Konfigurator mit Daten aus!</h2>
    </div>
  
    <form asp-action="SaveOrder" enctype="multipart/form-data"  class="shadow-lg p-3 mb-5 bg-body-tertiary rounded" asp-controller="Konfigurator">
  
        @Html.HiddenFor(m => m.userKey)
        <input type="hidden" value="@ViewBag.UserNameItem" name="userName" />

    <div id="InformBar">
        <div id="blockSclussel" >
            <div id="sclusselInfo">
                <div id="schlussel">
                    <h5>Schlüssel</h5>
                </div>
                    <div id ="schlussel2">
                        <input id="removeButton" type="button" value="-">
                        <select id="countKeySelect" onchange="selectKey(event.target.value)">
                        </select>
                        <input id="addButton" type="button" value="+">
                     
                </div>
            </div>
            <div id="itemKeyBlock">
                    <div id="TexCount-1">
                        <div class="TexCount">
                            <input type="text" required readonly id="keyPoint" name="FurNameKey" value="1" />
                            <div id="TexInputKey">
                                <input id="inputS" required name="NameKey" value="Schlüssel 1" onchange="chekedNameArienKey(event.target.value,1)" placeholder="Name des Schlüssels" type="text" />
                            </div>
                            <div>
                                <input id="inputCount" required name="CountKey" value="1" type="text" />
                            </div>
                        </div>
                    </div>
            </div>
        </div>
        <div>
            <div id="sclusselInfo2">
                <div id="schlussel">
                    <h5>Pos</h5>   
                </div>
                    <div id="schlussel">
                        <h5 >Türbezeichnung</h5>
               </div>
                    <div id="schlussel" >
                        <h5>Zylindertyp</h5>
               </div>

                    <div id="schlussel">
                        <h5>Zylinderlänge mm</h5>
                        <div style="align-items: end;justify-content: start;font-size: 11px;display: flex;gap: 5px;">
                            <p>außen  </p>
                            <img alt="zylinderlaenge" src="/compression/zylinderlaenge.webp" height="40" width="40">
                            <p>innen  </p>
                        </div>
                    </div>
                <div id="schlussel3">
                        <h5>Stück</h5>
                </div>
            </div>
            <div> 
                <div id="turInfo">
                        <div id="BlockTur-0">
                           
                    </div>
                <div id="InfoValue">
                        
                </div> 
                </div>
            </div>
                <div id="add_And_Minus">
                    <div style="align-items: flex-start;">
                        <input id="removeButtonTur" type="button" value="-">
                        <select id="countTurSelect" onchange="selectTur(event.target.value)">
                        </select>
                        <input id="addButtonTur" type="button" value="+">
                    </div>
                </div>
        </div>
    </div>
        <input type="text" name="IsOppen" style="display:none" id="vBool" />
        <input type="submit"  onclick="(bolleanCheked())" class="btn btn-success" id="input" value="Weiter" />
    </form>

        <div class="modal fade" id="hilfe" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Beginnen Sie hier mit dem Ausfüllen des Konfigurators!</h3>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                    </div>
                    <div class="modal-body">
                        <h5 id="hilfeText">Hier den Namen der Türen eingeben!</h5>
                        
                    </div>
                    <div class="modal-footer">
                        <div id="modelProgress">
                            <button id="hilfeNext" onclick="back()"> < </button>
                            <div id="circle">
                                <div id="circle2" class="c1">
                                </div>
                            </div>

                            <div id="circle">
                                <div id="circle2" class="c2">
                                </div>
                            </div>

                            <div id="circle">
                                <div id="circle2" class="c3">
                                </div>
                            </div>

                            <div id="circle">
                                <div id="circle2" class="c4">
                                </div>
                            </div>

                            <div id="circle">
                                <div id="circle2" class="c5">
                                </div>
                            </div>
                            <div id="circle">
                                <div id="circle2" class="c6">
                                </div>
                            </div>

                            <div id="circle">
                                <div id="circle2" class="c7">
                                </div>
                            </div>
                            <button id="hilfeBack" onclick="next()"> > </button>
                        </div>
                        <button type="button" class="btn danger" data-bs-dismiss="modal">Schließen</button>
                       
                    </div>
                </div>
                </div>
            </div>
       
</div>
@section Scripts {
    <script>

        let zylinderTypList = @Html.Raw(ViewBag.Zylinder_TypJson);
        let doppelAussenList = @Html.Raw(ViewBag.DoppelAussenJson);
        let doppelInternList = @Html.Raw(ViewBag.DoppelInternJson);

        let DoppelAussenSize = @Html.Raw(ViewBag.SizeDoppelAussen);
        let DoppelInternSize = @Html.Raw(ViewBag.SizeDoppelIntern);

        let KnayfAussenSize = @Html.Raw(ViewBag.SizeKnayfAussen);
        let KnayfInternSize = @Html.Raw(ViewBag.SizeKnayfIntern);

        let zylinderOptions = zylinderTypList.map(list => `<option>${list}</option>`).join('');
        let doppelAussenOptions = doppelAussenList.map(list => `<option id="OptionA">${list}</option>`).join('');
        let doppelInternOptions = doppelInternList.map(list => `<option id="OptionI">${list}</option>`).join('');

        let blockCount = document.querySelectorAll(".TexCount").length;
        let blockTur = document.querySelectorAll("#inputTur").length;

        let HalbSize = @Html.Raw(ViewBag.SizeHalb);
        let data = JSON.parse(localStorage.getItem(`${blockTur}checkbox${blockCount}`));
        let h = 0;

        let circle2 = document.querySelectorAll("#circle2");

        let circlestep = 0;
        let hilfeText = document.getElementById("hilfeText");


        function bolleanCheked() 
        {
            let dorCounter = document.querySelectorAll("#inputTur");
            let keyCounter = document.querySelectorAll("#inputS");
            let boolV = document.getElementById('vBool');
            const allHorizont = document.querySelectorAll(".horizontal");
            let boolArray = [];

            for (let i = 0; i < keyCounter.length; i++) {
                let w = 0;

                for (let j = 0; j < dorCounter.length; j++) {
                    w++;

                    let chekboxrow = allHorizont[j].childNodes[i].childNodes[3];

                    if (chekboxrow) boolArray.push(chekboxrow.value);
                }
            }
            boolV.value = boolArray.join(',');

        }

        function chekedNameArientiren(value, id) {
            let allKeyName = document.querySelectorAll("#inputS");

            let cheker = 1;

            for (let i = 0; i < allKeyName.length; i++) {
                if (allKeyName[i].value == value) {
                    let checkbox = document.getElementById(`${id}checkbox${cheker}`);
                    checkbox.checked = true;
                    let Icheckbox = document.getElementById(`I${id}checkbox${cheker}`);
                    Icheckbox.value = true;
                }
                cheker++;
            }

        }
        function chekedNameArienKey(value, id) {
            let allTurName = document.querySelectorAll("#inputTur");
            let cheker = 1;

            for (let i = 0; i < allTurName.length; i++) {
                if (allTurName[i].value == value) {
                    let checkbox = document.getElementById(`${cheker}checkbox${id}`);
                    checkbox.checked = true;
                    let Icheckbox = document.getElementById(`I${cheker}checkbox${id}`);
                    Icheckbox.value = true;

                }
                cheker++;
            }
        }


        function createCustomCheckbox(id) {
            var checkbox = document.getElementById(id);
            var checkboxValue = false;

            if (!localStorage.getItem(id)) {
                localStorage.setItem(id, 'false');
            }

            var savedValue = localStorage.getItem(id);

            if (savedValue !== null) {
                checkbox.checked = (savedValue === 'true');
                checkboxValue = checkbox.checked;
            }

            checkbox.addEventListener('change', function () {
                localStorage.setItem(id, this.checked);

                checkboxValue = this.checked;

                let switches = document.getElementById(`I${id}`);

                if (switches !== null)
                    switches.value = String(this.checked);

            });
        }

        function foo() {
            localStorage.clear();
        }

        window.onload = foo()

    </script>
    <script src="~/Js/index-konfigurator/modal_move.js"></script>
    <script src="~/Js/index-konfigurator/controll_dor.js"></script>
    <script src="~/Js/index-konfigurator/controll_key.js"></script>

    <script>

        let boolArray = [];
        document.addEventListener('DOMContentLoaded', (event) => {

            selectTur(5);
            selectKey(5);

            for (let i = 1; i < circle2.length; i++) {
                circle2[i].style.background = "white";
            }

            for (let i = 1; i < 100; i++) {
                let option = document.createElement("option");

                option.innerText = i;
                option.value = i;

                countTurSelect.append(option);
                countTurSelect.value = 5;
            }

            for (let i = 1; i < 100; i++) {
                let option = document.createElement("option");

                option.innerText = i;
                option.value = i;

                countKeySelect.append(option);
                countKeySelect.value = 5;
            }

        });
    </script>
    <script src="~/Js/index-konfigurator/dynemic_control_panel.js"></script>
}