@model schliessanlagen_konfigurator.Models.Orders;
@using Microsoft.AspNetCore.Http;

@{
    ViewData["Title"] = "Konfigurator";
}

<div>
    <div id="konfigMenu">
        <button type="button" class="btn btn-danger">1. Schließplan erstellen</button>
        @if (User.IsInRole("client") || User.IsInRole("admin"))
        {
            <button type="button" class="btn btn-secondary"><a href="@Url.Action("System_Auswählen","Konfigurator",new{userName = @ViewBag.UserNameItem , isNewKonfig = true} )">2. System auswählen</a></button>
        }

    </div>
    <div style="display:flex;gap: 20px;box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;align-items: center;">
        <button onclick="hilfe()" id="hilfeImg" style="border:none"><img src="/Image/help.png" width="60" hight="60" /></button>
        <h2>Füllen Sie den Konfigurator mit Daten aus!</h2>
    </div>
  
    <form asp-action="SaveOrder" enctype="multipart/form-data" id="content" asp-controller="Konfigurator">
  
        @Html.HiddenFor(m => m.userKey)
        <input type="hidden" value="@ViewBag.UserNameItem" name="userName" />

    <div id="InformBar">
        <div id="blockSclussel" >
            <div id="sclusselInfo">
                <div id="schlussel">
                    <h5>Schlüssel</h5>
                </div>
                    <div id ="schlussel2">
                        <input id="removeButton" type="button" value="-">
                        <select id="countKeySelect" onchange="selectKey(event.target.value)">
                        </select>
                        <input id="addButton" type="button" value="+">
                     
                </div>
            </div>
            <div id="itemKeyBlock">
                    <div id="TexCount-1">
                        <div class="TexCount">
                            <input type="text" required readonly style="position: relative;background:none;border:none;text-align: center; " name="FurNameKey" value="1" />
                            <div id="TexInputKey">
                                <input id="inputS" required name="NameKey" value="Schlüssel 1" onchange="chekedNameArienKey(event.target.value,1)" placeholder="Name des Schlüssels" type="text" />
                            </div>
                            <div>
                                <input id="inputCount" required name="CountKey" value="1" type="text" />
                            </div>
                        </div>
                    </div>
            </div>
        </div>
        <div>
            <div id="sclusselInfo2">
                <div id="schlussel">
                    <h5>Pos</h5>   
                </div>
                    <div id="schlussel">
                        <h5 >Türbezeichnung</h5>
               </div>
                    <div id="schlussel" >
                        <h5>Zylindertyp</h5>
               </div>

                    <div id="schlussel">
                        <h5>Zylinderlänge mm</h5>
                        <div style="align-items: end;justify-content: start;font-size: 11px;display: flex;gap: 5px;">
                            <p>außen  </p>
                            <img src="/Image/zylinderlaenge.png" height="40" width="40">
                            <p>innen  </p>
                        </div>
                    </div>
                <div id="schlussel3">
                        <h5>Stück</h5>
                </div>
            </div>
            <div> 
                <div id="turInfo">
                        <div id="BlockTur-0">
                            <div id="BlockTur-1" class="block">
                                <div class="TexCountTur">
                                    <div id="ItemTur">
                                        <div id="position">
                                            <h6 id="counterTur"><img src="@("/Image/options.png")" onmouseover="controlPannel(1)" height="20" width="20" style="margin-right: 10px;" />1</h6>
                                        </div>
                                        <div>
                                            <input id="inputTur" required name="Turname" value="Tür 1" onchange="chekedNameArientiren(event.target.value,1)" placeholder="Name der Tür" />
                                        </div>
                                    </div>
                                    <div>

                                        <img id="typeSylinder" src="/Image/doppelzylinder.png" style="margin-top:10px" height="30" width="30" />

                                    </div>

                                    <div id="SelectTurItem">
                                        <select id="TypeSelectTurType" onchange="selectParam(event.target.value,1)" name="ZylinderId">
                                            @foreach (var list in ViewBag.Zylinder_Typ)
                                            {
                                                <option>@list.nameType</option>
                                            }
                                        </select>
                                    </div>

                                    <div id="SelectTurItem">
                                        <select id="TypeSelectTurItem" class="aussen" name="aussen">
                                            @foreach (var list in ViewBag.DoppelAussen)
                                            {
                                                <option id="OptionA">@list</option>
                                            }
                                        </select>

                                    </div>
                                    <div id="SelectTurItem">
                                        <select id="TypeSelectTurItem" class="Innen" name="innen">
                                            @foreach (var list in ViewBag.DoppelIntern)
                                            {
                                                <option id="OptionI">@list</option>
                                            }
                                        </select>
                                    </div>
                                    <div id="chekerTur">
                                        <button type="button" onclick="Minus(1)">-</button>
                                        <input id="infoButten" value="1" type="text" name="CountTur" />
                                        <button type="button" onclick="Plus(1)">+</button>
                                    </div>
                                </div>
                            </div>
                    </div>
                <div id="InfoValue">
                            <div class="horizontal" draggable="true" id="1horizontal">
                                <div id="1.checkboxContainer1" class="checkboxContainer">
                                    <input class="konfiguratorSelect" onmouseover="drawLines(1,1)"  onmouseout="hideLines(1,1)"  type="checkbox" id="1checkbox1">
                                    <input type="hidden"  value="false" id="I1checkbox1">
                                </div>
                    </div>
                </div>
                </div>
            </div>
                <div id="add_And_Minus">
                    <div style="align-items: flex-start;">
                        <input id="removeButtonTur" type="button" value="-">
                        <select id="countTurSelect" onchange="selectTur(event.target.value)">
                        </select>
                        <input id="addButtonTur" type="button" value="+">
                    </div>
                </div>
        </div>
    </div>
        <input type="text" name="IsOppen" style="display:none" id="vBool" />
        <input type="submit"  onclick="(bolleanCheked())" class="btn btn-success" id="input" value="Weiter" />
    </form>

   @*  <div id="zylinderMenu" onmouseleave="closeControlPannel()">
       
        <div style="display:flex;gap:10px">

            <img src="@("/Image/arrows.png")" width="20" height="20" />
            <h5 id="infoControlPanelTur" class="Up">nach oben verschieben</h5>
        </div>
        <div style="display:flex;gap:10px">
            <img src="@("/Image/arrow.png")" width="20" height="20" />
            <h5 id="infoControlPanelTur" class="Down">nach unten verschieben</h5>
        </div>
        <div style="display:flex;gap:10px">
            <img src="@("/Image/files.png")" width="20" height="20" />
            <h5 id="infoControlPanelTur" class="koppi">kopieren</h5>
        </div>
        <div style="display:flex;gap:10px">
            <img src="@("/Image/delete.png")" width="20" height="20" />
            <h5 id="infoControlPanelTur" class="deleted">löschen</h5>
        </div>

    </div> *@

    <div id="myModal" class="modalLessen">
        <div class="modal-contentLessen ">
            <span class="clostHilfeModel">&times;</span>
            <br />
            <h2 id="hilfeText">Hier den Namen der Türen eingeben!</h2>
            <hr/>
            <div id="modelProgress">
                <button id="hilfeNext" onclick="back()"> < </button>
                <div id="circle">
                    <div id="circle2" class="c1">
                    </div>
                </div>

                <div id="circle">
                    <div id="circle2" class="c2">
                    </div>
                </div>

                <div id="circle">
                    <div id="circle2" class="c3">
                    </div>
                </div>

                <div id="circle">
                    <div id="circle2" class="c4">
                    </div>
                </div>

                <div id="circle">
                    <div id="circle2" class="c5">
                    </div>
                </div>
                <div id="circle">
                    <div id="circle2" class="c6">
                    </div>
                </div>

                <div id="circle">
                    <div id="circle2" class="c7">
                    </div>
                </div>  
                <button id="hilfeBack" onclick="next()"> > </button>
            </div>
        </div>
        <div class="arrow-down"></div>
    </div>
        <div id="myModalI" class="modalI">
            <div class="modal-contentI ">
                <span class="closI">&times;</span>
            <h2>Beginnen Sie hier mit dem Ausfüllen des Konfigurators!</h2>
            </div>
        </div>
</div>

<script>
    const containerKey = document.getElementById('InfoValue');
    let blocksKey;
    let dragSrcElkey = null;

    const container = document.getElementById('BlockTur-0');
    let blocks;
    let dragSrcEl = null;

    function handleDragStart(e) 
    {
        console.log(e);
        dragSrcEl = this;
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.innerHTML);
        this.classList.add('dragging');


        // handleDragStartKey(e)
    }
  
    function handleDragOver(e) 
    {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
        return false;
    }

    function handleDrop(e) 
    {
        if (e.stopPropagation) 
        {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        if (dragSrcEl !== this) 
        {
            const dragSrcSelectValues = Array.from(dragSrcEl.querySelectorAll('select')).map(select => select.value);
            const dropSelectValues = Array.from(this.querySelectorAll('select')).map(select => select.value);

            const dragSrcInputValues = Array.from(dragSrcEl.querySelectorAll('input')).map(select => select.value);
            const dropInputValues = Array.from(this.querySelectorAll('input')).map(select => select.value);

            // Замена содержимого блоков
            dragSrcEl.innerHTML = this.innerHTML;
            
            let b = dragSrcEl.id;

            dragSrcEl.id = this.id;

            this.id = b;

            this.innerHTML = e.dataTransfer.getData('text/html');

            // Восстановление значений select элементов
            Array.from(dragSrcEl.querySelectorAll('select')).forEach((select, index) => select.value = dropSelectValues[index]);
            Array.from(this.querySelectorAll('select')).forEach((select, index) => select.value = dragSrcSelectValues[index]);

            Array.from(dragSrcEl.querySelectorAll('input')).forEach((input, index) => input.value = dropInputValues[index]);
            Array.from(this.querySelectorAll('input')).forEach((input, index) => input.value = dragSrcInputValues[index]);


        }

        return false;
    }

    function handleDragEnd(e) {
        this.classList.remove('dragging');
        let blocks = container.querySelectorAll('.block');
        blocks.forEach(block => {
            block.classList.remove('over');
        });
    }
   


    function handleDragStartKey(e) {
        dragSrcElkey = this;
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.innerHTML);
        this.classList.add('dragging');

    }

    function handleDragOverKey(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
        return false;
    }

    function handleDropKey(e) {
        if (e.stopPropagation) {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        if (dragSrcElkey !== this) 
        {
            const dragSrcInputValues = Array.from(dragSrcElkey.querySelectorAll('input')).map(select => select.value);
            const dropInputValues = Array.from(this.querySelectorAll('input')).map(select => select.value);

            const dragSrcCheckboxValues = Array.from(dragSrcElkey.querySelectorAll('.konfiguratorSelect')).map(checkbox => checkbox.checked);
            const dropCheckboxValues = Array.from(this.querySelectorAll('.konfiguratorSelect')).map(checkbox => checkbox.checked);

            // Замена содержимого блоков
            dragSrcElkey.innerHTML = this.innerHTML;

            let b = dragSrcElkey.id;

            dragSrcElkey.id = this.id;

            this.id = b;

            this.innerHTML = e.dataTransfer.getData('text/html');

            Array.from(dragSrcElkey.querySelectorAll('input')).forEach((input, index) => input.value = dropInputValues[index]);
            Array.from(this.querySelectorAll('input')).forEach((input, index) => input.value = dragSrcInputValues[index]);

            Array.from(dragSrcElkey.querySelectorAll('.konfiguratorSelect')).forEach((checkbox, index) => checkbox.checked = dropCheckboxValues[index]);
            Array.from(this.querySelectorAll('.konfiguratorSelect')).forEach((checkbox, index) => checkbox.checked = dragSrcCheckboxValues[index]);

        }

        return false;
    }

    function handleDragEndKey(e) 
    {
        this.classList.remove('dragging');
        let blocksKey = containerKey.querySelectorAll('.block');
        blocksKey.forEach(block => {
            block.classList.remove('over');
        });
    }

    // function TurUp(Id) 
    // {
    //     let dor = document.getElementById("BlockTur-" + Id);
    //     let schritt = Number(Id) + 1;

    //     let uP = document.getElementById("BlockTur-" + schritt);
    //     var parent = dor.parentNode;

    //     parent.insertBefore(uP, dor);
    // }
    // function TurDown(Id) 
    // {
    //     let dor = document.getElementById("BlockTur-" + Id);
    //     let schritt = Number(Id) - 1;

    //     let uP = document.getElementById("BlockTur-" + schritt);
    //     var parent = dor.parentNode;

    //     parent.insertBefore(dor, uP);
    // }

    // function controlPannel(Id) 
    // {
    //     let dor = document.getElementById("BlockTur-" + Id);
    //     let controlPannel = document.getElementById("zylinderMenu");

    //     document.getElementsByClassName('Up')[0].addEventListener('click', function () {
    //         TurUp(Id);
    //     });
    //     document.getElementsByClassName('Down')[0].addEventListener('click', function () {
    //         TurDown(Id);
    //     });

    //     console.log(dor);

    //     controlPannel.style.display = "block";
    // }

    // function closeControlPannel() 
    // {
    //     let controlPannel = document.getElementById("zylinderMenu");

    //     controlPannel.style.display = "none";
    // }



    let blockCount = document.querySelectorAll(".TexCount").length;
    let blockTur = document.querySelectorAll("#inputTur").length;

    let DoppelAussenSize = @Html.Raw(ViewBag.SizeDoppelAussen);
    let DoppelInternSize = @Html.Raw(ViewBag.SizeDoppelIntern);

    let KnayfAussenSize = @Html.Raw(ViewBag.SizeKnayfAussen);
    let KnayfInternSize = @Html.Raw(ViewBag.SizeKnayfIntern);
    
    let HalbSize = @Html.Raw(ViewBag.SizeHalb);
    let data = JSON.parse(localStorage.getItem(`${blockTur}checkbox${blockCount}`));
    let h = 0;
    
    let circle2 = document.querySelectorAll("#circle2");

    let closeHilfe = document.getElementsByClassName("clostHilfeModel")[0];

    let boolArray = [];

    const scroll1 = document.getElementById('itemKeyBlock');
    const scroll2 = document.getElementById('InfoValue');

    function syncScroll(source, target) {
        target.scrollLeft = source.scrollLeft;
    }

    scroll1.addEventListener('scroll', () => syncScroll(scroll1, scroll2));
    scroll2.addEventListener('scroll', () => syncScroll(scroll2, scroll1));

    let countTurSelect = document.getElementById("countTurSelect");

    function drawLines(id, row) {

        const elemX = document.getElementById('BlockTur-' + id);
        const elemY = document.getElementById(id + 'checkbox' + row);

        const rectX = elemX.getBoundingClientRect();
        const rectY = elemY.getBoundingClientRect();

        const intersectionY = rectY.top < rectX.bottom && rectY.bottom > rectX.top;

        const chekboxSelect = document.getElementById(id + ".checkboxContainer" + row);

        const elemxItem = elemX.querySelectorAll(".TexCountTur")[0];

        if (intersectionY) 
        {
            elemxItem.style.background = "#8CC4E7";
            elemY.style.background = "#8CC4E7";

            const horizont = document.getElementById(`${id}horizontal`);
            horizont.style.background = "#8CC4E7";

            for (let i = 1; i<id; i++) 
            {
                let str = `${i}.checkboxContainer${row}`;

                const chekboxSelect = document.getElementById(str);
                chekboxSelect.style.background = "red";
               
            }
            
            
        } 
    }

    function hideLines(id,row) 
    {
        const verticalLine = document.getElementById('BlockTur-'+id);
        const elemxItem = verticalLine.querySelectorAll(".TexCountTur")[0];
        
       
        const horizontalLine = document.getElementById(id + 'checkbox' + row);
        elemxItem.style.background = '#ededed';
        horizontalLine.style.background = '#ededed';

        const horizont = document.getElementById(`${id}horizontal`);
        horizont.style.background = "#ededed";
        
        for (let i = 1; i < id; i++) 
        {
            const chekboxSelect = document.getElementById(i + ".checkboxContainer" + row);
            chekboxSelect.style.background = "none";
        }
        
        
    }
   

    document.addEventListener('DOMContentLoaded', (event) => 
    {
        var modal = document.getElementById("myModal");
        modal.style.display = "none";

        for (let i = 1;i<circle2.length ;i++) 
        {
            circle2[i].style.background = "white";
        }

        for (let i = 1; i < 200; i++) 
        {
            let option = document.createElement("option");
            
            option.innerText = i;
            option.value = i;

            countTurSelect.append(option);
        }

        for (let i = 1; i < 200; i++) 
        {
            let option = document.createElement("option");

            option.innerText = i;
            option.value = i;

            countKeySelect.append(option);
        }

    });
   
    let circlestep = 0;
    let hilfeText = document.getElementById("hilfeText");

    function next() 
    {
        let modalcontent = document.getElementsByClassName("modal-contentLessen")[0];
        let modalArrow = document.getElementsByClassName("arrow-down")[0];

        if (circlestep < 6) 
        {
            circle2[circlestep].style.background = "white";
            circlestep++;
            circle2[circlestep].style.background = "red";
            
            switch (circlestep) 
            {
                case 0:
                {
                        hilfeText.innerText = "Hier den Namen der Türen eingeben.";
                        hilfeText.innerHTML = "Hier den Namen der Türen eingeben.";
                        modalcontent.style.marginLeft = "300px";
                        modalArrow.style.marginLeft = "400px";
                        modalcontent.style.marginTop = "380px";
                    break;
                }
                case 1: 
                {
                        hilfeText.innerText = "Wählen Sie den Zylindertyp aus.";
                        hilfeText.innerHTML = "Wählen Sie den Zylindertyp aus.";
                        modalcontent.style.marginTop = "380px";
                        modalcontent.style.marginLeft = "600px";
                        modalArrow.style.marginLeft = "700px";
                    break;
                }
                case 2: 
                {
                        hilfeText.innerText = "Wählen Sie die Außenlänge des Zylinders aus.";
                        hilfeText.innerHTML = "Wählen Sie die Außenlänge des Zylinders aus.";
                        modalcontent.style.marginTop = "340px";
                        modalcontent.style.marginLeft = "700px";
                        modalArrow.style.marginLeft = "850px";
                    break;
                }
                 case 3:
                 {
                        hilfeText.innerText = "Wählen Sie die Innenlänge des Zylinders aus.";
                        hilfeText.innerHTML = "Wählen Sie die Innenlänge des Zylinders aus.";
                        modalcontent.style.marginTop = "340px";
                        modalcontent.style.marginLeft = "700px";
                        modalArrow.style.marginLeft = "890px";
                    break;
                }
                 case 4:
                 {
                        hilfeText.innerText = "Geben Sie die Anzahl der Schlösser ein.";
                        hilfeText.innerHTML = "Geben Sie die Anzahl der Schlösser ein.";
                        modalcontent.style.marginTop = "380px";
                        modalcontent.style.marginLeft = "800px";
                        modalArrow.style.marginLeft = "1010px";
                    break;
                }
                case 5: 
                {
                        hilfeText.innerText = "Kreuzen Sie an, welche Schlösser der Schlüssel schließen soll.";
                        hilfeText.innerHTML = "Kreuzen Sie an, welche Schlösser der Schlüssel schließen soll.";
                        modalcontent.style.marginTop = "350px";
                        modalcontent.style.marginLeft = "950px";
                        modalArrow.style.marginLeft = "1130px";
                    break;
                }
                case 6: 
                {
                        hilfeText.innerText = "Geben Sie die Anzahl der Schlüssel ein.";
                        hilfeText.innerHTML = "Geben Sie die Anzahl der Schlüssel ein.";
                        modalcontent.style.marginTop = "230px";
                        modalcontent.style.marginLeft = "950px";
                        modalArrow.style.marginLeft = "1130px";
                    break;
                }
                
               
            }
        }
    }
    function back() 
    {
        let modalcontent = document.getElementsByClassName("modal-contentLessen")[0];
        let modalArrow = document.getElementsByClassName("arrow-down")[0];
        if (circlestep > 0) 
        {
            circle2[circlestep].style.background = "white";
            circlestep--;
            circle2[circlestep].style.background = "red";

            switch (circlestep) 
            {
                case 0:
                    {
                        hilfeText.innerText = "Hier den Namen der Türen eingeben.";
                        hilfeText.innerHTML = "Hier den Namen der Türen eingeben.";
                        modalcontent.style.marginLeft = "300px";
                        modalArrow.style.marginLeft = "400px";
                        modalcontent.style.marginTop = "380px";
                        break;
                    }
                case 1:
                    {
                        hilfeText.innerText = "Wählen Sie den Zylindertyp aus.";
                        hilfeText.innerHTML = "Wählen Sie den Zylindertyp aus.";
                        modalcontent.style.marginTop = "380px";
                        modalcontent.style.marginLeft = "600px";
                        modalArrow.style.marginLeft = "700px";
                        break;
                    }
                case 2:
                    {
                        hilfeText.innerText = "Wählen Sie die Außenlänge des Zylinders aus.";
                        hilfeText.innerHTML = "Wählen Sie die Außenlänge des Zylinders aus.";
                        modalcontent.style.marginTop = "340px";
                        modalcontent.style.marginLeft = "700px";
                        modalArrow.style.marginLeft = "850px";
                        break;
                    }
                case 3:
                    {
                        hilfeText.innerText = "Wählen Sie die Innenlänge des Zylinders aus.";
                        hilfeText.innerHTML = "Wählen Sie die Innenlänge des Zylinders aus.";
                        modalcontent.style.marginTop = "340px";
                        modalcontent.style.marginLeft = "700px";
                        modalArrow.style.marginLeft = "890px";
                        break;
                    }
                case 4:
                    {
                        hilfeText.innerText = "Geben Sie die Anzahl der Schlösser ein.";
                        hilfeText.innerHTML = "Geben Sie die Anzahl der Schlösser ein.";
                        modalcontent.style.marginTop = "380px";
                        modalcontent.style.marginLeft = "800px";
                        modalArrow.style.marginLeft = "1010px";
                        break;
                    }
                case 5:
                    {
                        hilfeText.innerText = "Kreuzen Sie an, welche Schlösser der Schlüssel schließen soll.";
                        hilfeText.innerHTML = "Kreuzen Sie an, welche Schlösser der Schlüssel schließen soll.";
                        modalcontent.style.marginTop = "350px";
                        modalcontent.style.marginLeft = "950px";
                        modalArrow.style.marginLeft = "1130px";
                        break;
                    }
                case 6:
                    {
                        hilfeText.innerText = "Geben Sie die Anzahl der Schlüssel ein.";
                        hilfeText.innerHTML = "Geben Sie die Anzahl der Schlüssel ein.";
                        modalcontent.style.marginTop = "230px";
                        modalcontent.style.marginLeft = "950px";
                        modalArrow.style.marginLeft = "1130px";
                        break;
                    }
            }
        }
    }

    closeHilfe.addEventListener("click", () => 
    {
        var modal = document.getElementById("myModal");
        modal.style.display = "none";
    })

    function openModal() 
    {
        var modal = document.getElementById("myModal");
        modal.style.display = "block";
    }

    function hilfe() 
    {
        openModal();
    }


    function bolleanCheked() 
    {
        const form = document.getElementById('content');

        form.addEventListener('submit', async function (event) 
        {
            event.preventDefault(); 

            let AllDor = document.querySelectorAll(".block");
            let AllKey = document.querySelector("#itemKeyBlock");
            let AllChekbox = document.querySelector("#InfoValue");

            let key = AllKey.querySelectorAll(".TexCount");
            let row = 1;
            let cheker = 1;


            for (let s = 0; s < key.length; s++) 
            {
                let array = [];
                cheker = 1;

                for (let i = 0; i < AllDor.length; i++) {
                    let str = `${cheker}checkbox${row}`;
                    const chekboxSelect = AllChekbox.querySelector(`[id="${str}"]`);

                    const elemX = key[s];
                    const elemY = chekboxSelect;
                    const rectX = elemX.getBoundingClientRect();
                    const rectY = elemY ? elemY.getBoundingClientRect() : { top: 0, bottom: 0 };

                    const intersectionY = elemY && rectY.top < rectX.bottom && rectY.bottom > rectX.top;

                    array.push(elemY);

                    cheker++;
                }

                let hasChecked = Array.from(array).some(checkbox => checkbox.checked);

                if (!hasChecked) {
                    key[s].remove();

                    array.forEach((item) => {
                        if (item) item.remove();
                    });
                }
                row++;
            }

            cheker = 1;

            for (let i = 0; i < AllDor.length; i++) 
            {
                let str = `${cheker}horizontal`;
                const chekboxSelect = AllChekbox.querySelector(`[id="${str}"]`);
                const input = chekboxSelect ? chekboxSelect.querySelectorAll('input[type=checkbox]') : [];

                const elemX = AllDor[i];
                const elemY = chekboxSelect;
                const rectX = elemX.getBoundingClientRect();
                const rectY = elemY ? elemY.getBoundingClientRect() : { top: 0, bottom: 0 };

                const intersectionY = elemY && rectY.top < rectX.bottom && rectY.bottom > rectX.top;

                let hasChecked = Array.from(input).some(checkbox => checkbox.checked);
                if (intersectionY) {
                    if (!hasChecked) {
                        AllDor[i].remove();
                        if (elemY) elemY.remove();
                    }
                }
                cheker++;
            }

           

            let dorCounter = document.querySelectorAll("#inputTur");
            let keyCounter = document.querySelectorAll("#inputS");
            let boolV = document.getElementById('vBool');
            let boolArray = [];

            for (let i = 0; i < keyCounter.length; i++) {
                let w = 0;

                for (let j = 0; j < dorCounter.length; j++) {
                    w++;
                    let chekbox = document.getElementById(`I${w}checkbox${i + 1}`);
                    if (chekbox) boolArray.push(chekbox.value);
                }
            }
            boolV.value = boolArray.join(',');

            // Отправляем форму вручную после выполнения логики
            form.submit();
        });
    }

    function chekedNameArientiren(value,id) 
    {
        let allKeyName = document.querySelectorAll("#inputS");
       
        let cheker = 1;

        for (let i = 0; i < allKeyName.length; i++) 
        {
            if (allKeyName[i].value == value) 
            {
                let checkbox = document.getElementById(`${id}checkbox${cheker}`);
                checkbox.checked = true;
                let Icheckbox = document.getElementById(`I${id}checkbox${cheker}`);
                Icheckbox.value = true;
            }
            cheker++;
        }
       
    }
    function chekedNameArienKey(value,id) 
    {
        let allTurName = document.querySelectorAll("#inputTur");
        let cheker = 1;

        for (let i = 0; i < allTurName.length; i++) 
        {
            if (allTurName[i].value == value) 
            {
                let checkbox = document.getElementById(`${cheker}checkbox${id}`);
                checkbox.checked = true;
                let Icheckbox = document.getElementById(`I${cheker}checkbox${id}`);
                Icheckbox.value = true;
             
            }
            cheker++;
        }
    }
    function Plus(turNumber) 
    {
        let BlockTur = document.querySelector(`#BlockTur-${turNumber}`);
        let countTur = BlockTur.querySelector("#infoButten");
        let count = countTur.value;
        count++;
        countTur.value = count;
    }
    function Minus(turNumber) 
    {
        let BlockTur = document.querySelector(`#BlockTur-${turNumber}`);
        let countTur = BlockTur.querySelector("#infoButten");
        let count = countTur.value;

        if (countTur.value != 0) 
        {
            count--;
        }
       
        countTur.value = count;
    }
    function selectParam(value,turNumber) 
    {
        let BlockTur = document.querySelector(`#BlockTur-${turNumber}`);

        let Aussen = BlockTur.querySelector(".aussen");
        let Intern = BlockTur.querySelector(".Innen");
        let Option = BlockTur.querySelector(".Option");
        
        let TypeSylinder = BlockTur.querySelector("#typeSylinder");

        let Aitems = Aussen.querySelectorAll("#OptionA");
        let Iitems = Intern.querySelectorAll("#OptionI");
        
        Aitems.forEach(function (items) 
        {
            items.parentNode.removeChild(items);
        });

        Iitems.forEach(function (items) 
        {
            items.parentNode.removeChild(items);
        });

        if (value == "Doppelzylinder") 
        {
            for (let i = 0; i < DoppelAussenSize.length; i++) 
            {
                let option = document.createElement("option");
                option.id = "OptionA";
                option.innerHTML = DoppelAussenSize[i];
                option.innerText = DoppelAussenSize[i];
                Aussen.appendChild(option);
            }
            for (let i = 0; i < DoppelInternSize.length; i++) 
            {
                let option = document.createElement("option");
                option.id = "OptionI";
                option.innerHTML = DoppelInternSize[i];
                option.innerText = DoppelInternSize[i];
                Intern.appendChild(option);
            }
           
            TypeSylinder.src = "/Image/doppelzylinder.png";
        }
        if (value == "Halbzylinder") 
        {
            for (let i = 0; i < HalbSize.length; i++) 
            {
                let option = document.createElement("option");
                option.id = "OptionA";
                option.innerHTML = HalbSize[i];
                option.innerText = HalbSize[i];
                Aussen.appendChild(option);
            }
          
            TypeSylinder.src = "/Image/halbzylinder.png";
        }
        if (value == "Knaufzylinder") 
        {
            for (let i = 0; i < KnayfAussenSize.length; i++) 
            {
                let option = document.createElement("option");
                option.id = "OptionA";
                option.innerHTML = KnayfAussenSize[i];
                option.innerText = KnayfAussenSize[i];
                Aussen.appendChild(option);
            }
            for (let i = 0; i < KnayfInternSize.length; i++) 
            {
                let option = document.createElement("option");
                option.id = "OptionI";
                option.innerHTML = KnayfInternSize[i];
                option.innerText = KnayfInternSize[i];
                Intern.appendChild(option);
            }
          
            TypeSylinder.src = "/Image/knaufzylinder.png";

        }
        if (value == "Hebelzylinder") 
        {
           
            TypeSylinder.src = "/Image/briefkastenzylinder.png";
        }
        if (value == "Vorhangschloss") 
        {
            TypeSylinder.src = "/Image/vorhangschloss.png";
        }
        if (value == "Aussenzylinder") 
        {
          
            TypeSylinder.src = "/Image/aussenzylinder.png";
        }

    }

    function createCustomCheckbox(id) 
    {
        var checkbox = document.getElementById(id);
        var checkboxValue = false;

        if (!localStorage.getItem(id)) 
        {
            localStorage.setItem(id, 'false');
        }
     
        var savedValue = localStorage.getItem(id);

        if (savedValue !== null) 
        {
            checkbox.checked = (savedValue === 'true'); 
            checkboxValue = checkbox.checked;
        }

        checkbox.addEventListener('change', function () 
        {
            localStorage.setItem(id, this.checked);
           
            checkboxValue = this.checked;

            let switches = document.getElementById(`I${id}`);
         
            if (switches !== null)
                switches.value = String(this.checked);

        });
    }

    function foo() {
        localStorage.clear();
        createCustomCheckbox(`${blockTur}checkbox${blockCount}`);
    }

    window.onload = foo()

    function removeBlockTur() 
    {
        let countKeySelect = document.getElementById("countTurSelect");
        let x = Number(countKeySelect.value);
        x--;
        countKeySelect.value = x;

                let blockToRemove = document.getElementById('BlockTur-' + blockTur);
                    
                if (blockToRemove) 
                {
                       blockToRemove.remove();

                       let Horizontal = document.getElementById(`${blockTur}horizontal`);
                            
                       Horizontal.remove();

                       blockTur--;
                }
    }

        function addBlockTur() 
        {
            let countKeySelect = document.getElementById("countTurSelect");
            let x = Number(countKeySelect.value);
            x++;
            countKeySelect.value = x;

            blockTur++;
            let newBlock = document.createElement('div');
            newBlock.id = 'BlockTur-' + blockTur;
            newBlock.className = "block";
            newBlock.draggable = "true";
            newBlock.innerHTML = `  <div class="TexCountTur">
                                    <div id="ItemTur">
                                        <div id="position">
                                                           <h6 id="counterTur"><img src="@("/Image/options.png")" onmouseover="controlPannel(${blockTur})" height="20" width="20" style="margin-right: 10px;" /> ${blockTur}</h6>
                                        </div>

                                        <div>
                                                              <input id="inputTur" required  onchange="chekedNameArientiren(event.target.value,${blockTur})" name="Turname" value="Tür ${blockTur}" placeholder="Name der Tür" />
                                        </div>

                                            <div>

                                                 <img  id="typeSylinder" src="/Image/doppelzylinder.png" height="30" width="30"  />

                                            </div>
                                    </div>
                                     
                                    <div id="SelectTurItem">
                                            <select id="TypeSelectTurType"  onchange="selectParam(event.target.value,${blockTur})" name="ZylinderId">
                                        @foreach (var list in ViewBag.Zylinder_Typ)
                                        {
                                          <option>@list.nameType</option>
                                        }
                                        </select>
                                    </div>
                                     
                                    <div id="SelectTurItem">
                                            <select id="TypeSelectTurItem"  class="aussen" name="aussen">
                                            @foreach (var list in ViewBag.DoppelAussen)
                                            {
                                              <option id="OptionA">@list</option>
                                            }
                                        </select>
                                    </div>
                                    <div id="SelectTurItem">
                                                <select id="TypeSelectTurItem" class="Innen" name="innen">
                                             @foreach (var list in ViewBag.DoppelIntern)
                                             {
                                                   <option id="OptionI">@list</option>
                                             }
                                        </select>
                                    </div>
                                               <div id="chekerTur">
                                                <button type="button" onclick="Minus(${blockTur})">-</button>
                                            <input id="infoButten"  value="1" type="text" name="CountTur" />
                                               <button type="button" onclick="Plus(${blockTur})">+</button>
                                        </div>
                                </div>
                              
                    `;

                document.getElementById('BlockTur-0').appendChild(newBlock);

                blocks = container.querySelectorAll('.block');
                blocks.forEach(block => {
                    block.addEventListener('dragstart', handleDragStart);
                    block.addEventListener('dragover', handleDragOver);
                    block.addEventListener('drop', handleDrop);
                    block.addEventListener('dragend', handleDragEnd);
                });


                let horizont = document.createElement('div');
                horizont.id = `${blockTur}horizontal`;
                horizont.classList.add('horizontal');
                horizont.draggable = "true";

                blocksKey = containerKey.querySelectorAll('.horizontal');
                blocksKey.forEach(block => {
                block.addEventListener('dragstart', handleDragStartKey);
                block.addEventListener('dragover', handleDragOverKey);
                block.addEventListener('drop', handleDropKey);
                block.addEventListener('dragend', handleDragEndKey);
                });

                for (let i = 1; i <= blockCount; i++) 
                {

                    let newBlockTur = document.createElement('div');

                    newBlockTur.innerHTML = ` <input type="checkbox" class="konfiguratorSelect" onmouseover="drawLines(${blockTur},${i})"  onmouseout="hideLines(${blockTur},${i})" id=${blockTur}checkbox${i}>
                    <input type="hidden" value="false" id="I${blockTur}checkbox${i}">`;

                    newBlockTur.id = `${blockTur}.checkboxContainer${i}`;

                    newBlockTur.classList.add('checkboxContainer');

                    horizont.appendChild(newBlockTur);

                    document.getElementById('InfoValue').appendChild(horizont);

                    createCustomCheckbox(`${blockTur}checkbox${i}`);
                }
        }
        function removeBlock() 
        {
            let blockToRemove = document.getElementById('TexCount-' + blockCount);
            let countKeySelect = document.getElementById("countKeySelect");
            let x = Number(countKeySelect.value);
            x--;
            countKeySelect.value = x;

            if (blockToRemove) 
            {
                blockToRemove.remove();
                if (blockTur > 1) 
                {
                    for (let f = 1; f <= blockTur;) 
                    {
                            let blockToRemoveTurValue = document.getElementById(`${f}.checkboxContainer${blockCount}`);
                            blockToRemoveTurValue.remove();
  
                        f++;
 
                    }
                       
                }

                    else 
                    {
                        let blockToRemoveTurValue = document.getElementById(`${blockTur}.checkboxContainer${blockCount}`);
                        blockToRemoveTurValue.remove();
                    }

            blockCount--;
            }
              
        }

    function addBlock() 
    {
        blockCount++;

        let countKeySelect = document.getElementById("countKeySelect");
        let x =  Number(countKeySelect.value);
        x++;
        countKeySelect.value = x;

        let newBlock = document.createElement('div');
        newBlock.id = 'TexCount-' + blockCount;
        newBlock.innerHTML = `
                               <div  class="TexCount">
                                     <input type="text" readonly required  name="FurNameKey" style="position: relative;background:none;border:none;text-align: center;" value="${blockCount}" />
                            <div id="TexInputKey">
                                                <input id="inputS" required name="NameKey" onchange="chekedNameArienKey(event.target.value,${blockCount})" value="Schlüssel ${blockCount}" placeholder="Name des Schlüssels" type="text" />
                            </div>
                            <div>
                                         <input id="inputCount" required name="CountKey" value="1" type="text" />
                            </div>
                        </div>

            `;
        document.getElementById('itemKeyBlock').appendChild(newBlock);
      
        let horizont = document.getElementById(`${blockTur}horizontal`);

        for (let i = 1; i <= blockTur; i++) 
        {
          
            let newBlockTur = document.createElement('div');

            newBlockTur.innerHTML = ` <input type="checkbox"  class="konfiguratorSelect" onmouseover="drawLines(${i},${blockCount})"  onmouseout="hideLines(${i},${blockCount})" id=${i}checkbox${blockCount}>
                                    <input type="hidden"  value="false" id="I${i}checkbox${blockCount}">`;

            newBlockTur.id = `${i}.checkboxContainer${blockCount}`;

            newBlockTur.classList.add('checkboxContainer');

            document.getElementById(`${i}horizontal`).appendChild(newBlockTur);

            document.getElementById('InfoValue').appendChild(horizont);

            createCustomCheckbox(`${i}checkbox${blockCount}`);
        }

    }
    function selectKey(value) 
    {
        localStorage.clear();

        document.getElementById('itemKeyBlock').innerHTML = "";
        // blockTur = 0;
        blockCount = 0;

        let hor = document.querySelectorAll(".horizontal");
        
        hor.forEach((item) => {
            item.innerHTML = "";
        });

        for (let i = 1; i <= value ;i++) 
        {
            blockCount++;

            let newBlock = document.createElement('div');
            newBlock.id = 'TexCount-' + blockCount;
            newBlock.innerHTML = `
                                   <div  class="TexCount">
                                         <input type="text" required  name="FurNameKey" style="position: relative;background:none;border:none;text-align: center;" value="${blockCount}" />
                                <div id="TexInputKey">
                                                <input id="inputS" required name="NameKey" onchange="chekedNameArienKey(event.target.value,${blockCount})" value="Schlüssel ${blockCount}" placeholder="Name des Schlüssels" type="text" />
                                </div>
                                <div>
                                   <input id="inputCount" required name="CountKey" value="1" type="text" />
                                </div>
                            </div>

            `;

            document.getElementById('itemKeyBlock').appendChild(newBlock);

            let horizont = document.getElementById(`${blockTur}horizontal`);

            horizont.draggable = "true";

            for (let i = 1; i <= blockTur; i++) 
            {

                let newBlockTur = document.createElement('div');

                newBlockTur.innerHTML = ` <input type="checkbox" class="konfiguratorSelect" onmouseover="drawLines(${i},${blockCount})"  onmouseout="hideLines(${i},${blockCount})" id=${i}checkbox${blockCount}>
                                        <input type="hidden"  value="false" id="I${i}checkbox${blockCount}">`;

                newBlockTur.id = `${i}.checkboxContainer${blockCount}`;

                newBlockTur.classList.add('checkboxContainer');

                document.getElementById(`${i}horizontal`).appendChild(newBlockTur);

                document.getElementById('InfoValue').appendChild(horizont);

                createCustomCheckbox(`${i}checkbox${blockCount}`);
            }

            blocksKey = containerKey.querySelectorAll('.horizontal');

            blocksKey.forEach(block => {
                block.addEventListener('dragstart', handleDragStartKey);
                block.addEventListener('dragover', handleDragOverKey);
                block.addEventListener('drop', handleDropKey);
                block.addEventListener('dragend', handleDragEndKey);
            });

        }

    }

    function selectTur(value) 
    {
        localStorage.clear();
        blockTur = 0;
        document.getElementById('InfoValue').innerHTML = '';
        document.getElementById('BlockTur-0').innerHTML = '';

        for (let i = 1; i <= value; i++) 
        {
            blockTur++;

            let newBlock = document.createElement('div');
            newBlock.className = "block";
            newBlock.draggable = "true";
            newBlock.id = 'BlockTur-' + blockTur;
            newBlock.innerHTML = `  <div class="TexCountTur">
                                        <div id="ItemTur">
                                            <div id="position">
                                                  <h6 id="counterTur"><img src="@("/Image/options.png")" height="20" width="20" onmouseover="controlPannel(${blockTur})" style="margin-right: 10px;" />${blockTur}</h6>
                                            </div>

                                            <div>
                                                                  <input id="inputTur" required  onchange="chekedNameArientiren(event.target.value,${blockTur})" value="Tür ${blockTur}" name="Turname" placeholder="Name der Tür" />
                                            </div>

                                                <div>
                                                     <img  id="typeSylinder" src="/Image/doppelzylinder.png" height="30" width="30"  />
                                                </div>
                                        </div>

                                        <div id="SelectTurItem">
                                                <select id="TypeSelectTurType"  onchange="selectParam(event.target.value,${blockTur})" name="ZylinderId">
                                                @foreach (var list in ViewBag.Zylinder_Typ)
                                                {
                                                    <option>@list.nameType</option>
                                                }
                                            </select>
                                        </div>

                                        <div id="SelectTurItem">
                                                <select id="TypeSelectTurItem"  class="aussen" name="aussen">
                                                @foreach (var list in ViewBag.DoppelAussen)
                                                {
                                                     <option id="OptionA">@list</option>
                                                }
                                            </select>
                                        </div>
                                        <div id="SelectTurItem">
                                                    <select id="TypeSelectTurItem" class="Innen" name="innen">
                                                    @foreach (var list in ViewBag.DoppelIntern)
                                                    {
                                                       <option id="OptionI">@list</option>
                                                    }
                                            </select>
                                        </div>
                                                   <div id="chekerTur">
                                                    <button type="button" onclick="Minus(${blockTur})">-</button>
                                                <input id="infoButten"  value="1" type="text" name="CountTur" />
                                                   <button type="button" onclick="Plus(${blockTur})">+</button>
                                            </div>
                                    </div>

                        `;


            document.getElementById('BlockTur-0').appendChild(newBlock);

            let blocks = container.querySelectorAll('.block');
            blocks.forEach(block => {
                block.addEventListener('dragstart', handleDragStart);
                block.addEventListener('dragover', handleDragOver);
                block.addEventListener('drop', handleDrop);
                block.addEventListener('dragend', handleDragEnd);
            });

            console.log(blocks);

            let horizont = document.createElement('div');
            horizont.draggable = "true";
            horizont.id = `${blockTur}horizontal`;
            horizont.classList.add('horizontal');

            for (let i = 1; i <= blockCount; i++) 
            {

                let newBlockTur = document.createElement('div');

                newBlockTur.innerHTML = ` <input type="checkbox" onmouseover="drawLines(${blockTur},${i})"  onmouseout="hideLines(${blockTur},${i})" id=${blockTur}checkbox${i}>
                <input type="hidden" value="false" id="I${blockTur}checkbox${i}">`;

                newBlockTur.id = `${blockTur}.checkboxContainer${i}`;

                newBlockTur.classList.add('checkboxContainer');

                horizont.appendChild(newBlockTur);

                document.getElementById('InfoValue').appendChild(horizont)

                createCustomCheckbox(`${blockTur}checkbox${i}`);
            }
            let blocksKey = containerKey.querySelectorAll('.horizontal');

            blocksKey.forEach(block => {
                block.addEventListener('dragstart', handleDragStartKey);
                block.addEventListener('dragover', handleDragOverKey);
                block.addEventListener('drop', handleDropKey);
                block.addEventListener('dragend', handleDragEndKey);
            });
        }

    }

    document.getElementById('removeButton').addEventListener('click', removeBlock);
    document.getElementById('addButton').addEventListener('click', addBlock);

    document.getElementById('removeButtonTur').addEventListener('click', removeBlockTur);
    document.getElementById('addButtonTur').addEventListener('click', addBlockTur);

</script>