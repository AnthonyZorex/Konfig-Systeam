// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using schliessanlagen_konfigurator.Data;

#nullable disable

namespace schliessanlagen_konfigurator.Migrations
{
    [DbContext(typeof(schliessanlagen_konfiguratorContext))]
    [Migration("20240523100054_OptionsProductFx")]
    partial class OptionsProductFx
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "820f5013-74a4-453d-938d-71ba75ce715d",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "3b9a0df4-2e24-4228-bb68-14cedd34f278",
                            Name = "client",
                            NormalizedName = "client"
                        },
                        new
                        {
                            Id = "65401e98-9a56-423f-abcf-c4603dedab3a",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "e01052e5-e874-4ccc-9b17-9dbd30dd9e68",
                            Name = "client",
                            NormalizedName = "client"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rouns_all_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aussen_Rund_allId")
                        .HasColumnType("int");

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Aussen_Rund_allId");

                    b.ToTable("Aussen_Rouns_all_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_all", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aussen_Rund_optionsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Aussen_Rund_optionsId");

                    b.ToTable("Aussen_Rund_all");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aussenzylinder_RundzylinderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Aussenzylinder_RundzylinderId");

                    b.ToTable("Aussen_Rund_options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussenzylinder_Rundzylinder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Aussenzylinder_Rundzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Aussen_Innen_Halbzylinder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Profil_HalbzylinderId")
                        .HasColumnType("int");

                    b.Property<float>("aussen")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Profil_HalbzylinderId");

                    b.ToTable("Aussen_Innen_Halbzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artikelnummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Profil_Halbzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Profil_HalbzylinderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Profil_HalbzylinderId");

                    b.ToTable("Profil_Halbzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("Halbzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<int?>("Halbzylinder_OptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Halbzylinder_OptionsId");

                    b.ToTable("Halbzylinder_Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Hebelzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Hebelzylinder_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HebelzylinderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HebelzylinderId");

                    b.ToTable("Hebelzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Options_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZylinderId")
                        .HasColumnType("int");

                    b.Property<float?>("aussen")
                        .HasColumnType("real");

                    b.Property<float?>("innen")
                        .HasColumnType("real");

                    b.Property<string>("userKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.KeyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OpenKeyId")
                        .HasColumnType("int");

                    b.Property<bool>("isOpen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OpenKeyId");

                    b.ToTable("KeyValue");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdersId");

                    b.ToTable("isOpen_Order");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountKey")
                        .HasColumnType("int");

                    b.Property<string>("ForNameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("isOpen_OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("isOpen_OrderId");

                    b.ToTable("isOpen_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Aussen_Innen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Intern")
                        .HasColumnType("real");

                    b.Property<int>("Profil_DoppelzylinderId")
                        .HasColumnType("int");

                    b.Property<float>("aussen")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Profil_DoppelzylinderId");

                    b.ToTable("Aussen_Innen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isGround")
                        .HasColumnType("bit");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Profil_Doppelzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoppelzylinderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoppelzylinderId");

                    b.ToTable("Profil_Doppelzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("NGF");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF_Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<int?>("NGFId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NGFId");

                    b.ToTable("NGF_Value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Aussen_Innen_Knauf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Intern")
                        .HasColumnType("real");

                    b.Property<int>("Profil_KnaufzylinderId")
                        .HasColumnType("int");

                    b.Property<float>("aussen")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Profil_KnaufzylinderId");

                    b.ToTable("Aussen_Innen_Knauf");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isGround")
                        .HasColumnType("bit");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Profil_Knaufzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Profil_KnaufzylinderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Profil_KnaufzylinderId");

                    b.ToTable("Profil_Knaufzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("Knayf_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<int?>("Knayf_OptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Knayf_OptionsId");

                    b.ToTable("Knayf_Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Schliessanlagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("nameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.SysteamPriceKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameSysteam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SysteamPriceKey");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.ProductSysteam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Aussen")
                        .HasColumnType("real");

                    b.Property<float?>("Intern")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserOrdersShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserOrdersShopId");

                    b.ToTable("ProductSysteam");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.UserOrdersShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OrderSum")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("createData")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrdersShop");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionsVorhan");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan_value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<int?>("OptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OptionsId");

                    b.ToTable("OptionsVorhan_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("VorhangschlossId")
                        .HasColumnType("int");

                    b.Property<float>("sizeVorhangschloss")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("VorhangschlossId");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.Vorhan_Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("VorhangschlossId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VorhangschlossId");

                    b.ToTable("Vorhan_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhangschloss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schliessanlagenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("schliessanlagenId");

                    b.ToTable("Vorhangschloss");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("schliessanlagen_konfigurator.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rouns_all_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_all", "Aussen_Rund_all")
                        .WithMany("Aussen_Rouns_all_value")
                        .HasForeignKey("Aussen_Rund_allId");

                    b.Navigation("Aussen_Rund_all");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_all", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_options", "Aussen_Rund_options")
                        .WithMany("Aussen_Rund_all")
                        .HasForeignKey("Aussen_Rund_optionsId");

                    b.Navigation("Aussen_Rund_options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Aussenzylinder_Rundzylinder", "Aussenzylinder_Rundzylinder")
                        .WithMany("Aussen_Rund_options")
                        .HasForeignKey("Aussenzylinder_RundzylinderId");

                    b.Navigation("Aussenzylinder_Rundzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussenzylinder_Rundzylinder", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Aussenzylinder_Rundzylinder")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Aussen_Innen_Halbzylinder", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder", "Profil_Halbzylinder")
                        .WithMany("Aussen_Innen_Halbzylinder")
                        .HasForeignKey("Profil_HalbzylinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profil_Halbzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Profil_Halbzylinder")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder", "Profil_Halbzylinder")
                        .WithMany("Profil_Halbzylinder_Options")
                        .HasForeignKey("Profil_HalbzylinderId");

                    b.Navigation("Profil_Halbzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder_Options", "Options")
                        .WithMany("Halbzylinder_Options")
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options", "Halbzylinder_Options")
                        .WithMany("Halbzylinder_Options_value")
                        .HasForeignKey("Halbzylinder_OptionsId");

                    b.Navigation("Halbzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebel", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Hebelzylinder")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Hebelzylinder_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Hebel", "Hebelzylinder")
                        .WithMany("Hebelzylinder_Options")
                        .HasForeignKey("HebelzylinderId");

                    b.Navigation("Hebelzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Hebelzylinder.Hebelzylinder_Options", "Option")
                        .WithMany("Options")
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Options_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Hebelzylinder.Options", "Options")
                        .WithMany("Options_value")
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.KeyValue", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_value", "OpenKey")
                        .WithMany("KeyValue")
                        .HasForeignKey("OpenKeyId");

                    b.Navigation("OpenKey");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_Order", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Orders", "Orders")
                        .WithMany("isOpen_Order")
                        .HasForeignKey("OrdersId");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_Order", "isOpen_Order")
                        .WithMany("isOpen_value")
                        .HasForeignKey("isOpen_OrderId");

                    b.Navigation("isOpen_Order");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Aussen_Innen", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder", "Profil_Doppelzylinder")
                        .WithMany("Aussen_Innen")
                        .HasForeignKey("Profil_DoppelzylinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profil_Doppelzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Profil_Doppelzylinder")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder", "Doppelzylinder")
                        .WithMany("Profil_Doppelzylinder_Options")
                        .HasForeignKey("DoppelzylinderId");

                    b.Navigation("Doppelzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder_Options", "Options")
                        .WithMany("NGF")
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF_Value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF", "NGF")
                        .WithMany("NGF_Value")
                        .HasForeignKey("NGFId");

                    b.Navigation("NGF");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Aussen_Innen_Knauf", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder", "Profil_Knaufzylinder")
                        .WithMany("Aussen_Innen_Knauf")
                        .HasForeignKey("Profil_KnaufzylinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profil_Knaufzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Profil_Knaufzylinder")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder", "Profil_Knaufzylinder")
                        .WithMany("Profil_Knaufzylinder_Options")
                        .HasForeignKey("Profil_KnaufzylinderId");

                    b.Navigation("Profil_Knaufzylinder");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder_Options", "Options")
                        .WithMany("options")
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options", "Knayf_Options")
                        .WithMany("Knayf_Options_value")
                        .HasForeignKey("Knayf_OptionsId");

                    b.Navigation("Knayf_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.ProductSysteam", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Users.UserOrdersShop", "UserOrdersShop")
                        .WithMany("ProductSysteam")
                        .HasForeignKey("UserOrdersShopId");

                    b.Navigation("UserOrdersShop");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.UserOrdersShop", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Users.User", "User")
                        .WithMany("UserOrdersShop")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Vorhan.Vorhan_Options", "Option")
                        .WithMany("Options")
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan_value", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan", "Options")
                        .WithMany("Options_value")
                        .HasForeignKey("OptionsId");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.Size", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Vorhangschloss", "Vorhangschloss")
                        .WithMany("Size")
                        .HasForeignKey("VorhangschlossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorhangschloss");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.Vorhan_Options", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Vorhangschloss", "Vorhangschloss")
                        .WithMany("Vorhan_Options")
                        .HasForeignKey("VorhangschlossId");

                    b.Navigation("Vorhangschloss");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhangschloss", b =>
                {
                    b.HasOne("schliessanlagen_konfigurator.Models.Schliessanlagen", "Schliessanlagen")
                        .WithMany("Vorhangschloss")
                        .HasForeignKey("schliessanlagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schliessanlagen");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_all", b =>
                {
                    b.Navigation("Aussen_Rouns_all_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussen_Rund.Aussen_Rund_options", b =>
                {
                    b.Navigation("Aussen_Rund_all");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Aussenzylinder_Rundzylinder", b =>
                {
                    b.Navigation("Aussen_Rund_options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder", b =>
                {
                    b.Navigation("Aussen_Innen_Halbzylinder");

                    b.Navigation("Profil_Halbzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.Profil_Halbzylinder_Options", b =>
                {
                    b.Navigation("Halbzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Halbzylinder.ValueOptions.Halbzylinder_Options", b =>
                {
                    b.Navigation("Halbzylinder_Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebel", b =>
                {
                    b.Navigation("Hebelzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Hebelzylinder_Options", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Hebelzylinder.Options", b =>
                {
                    b.Navigation("Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Orders", b =>
                {
                    b.Navigation("isOpen_Order");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_Order", b =>
                {
                    b.Navigation("isOpen_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.OrdersOpen.isOpen_value", b =>
                {
                    b.Navigation("KeyValue");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder", b =>
                {
                    b.Navigation("Aussen_Innen");

                    b.Navigation("Profil_Doppelzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.Profil_Doppelzylinder_Options", b =>
                {
                    b.Navigation("NGF");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.ProfilDopelZylinder.ValueOptions.NGF", b =>
                {
                    b.Navigation("NGF_Value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder", b =>
                {
                    b.Navigation("Aussen_Innen_Knauf");

                    b.Navigation("Profil_Knaufzylinder_Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.Profil_Knaufzylinder_Options", b =>
                {
                    b.Navigation("options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Profil_KnaufzylinderZylinder.ValueOptions.Knayf_Options", b =>
                {
                    b.Navigation("Knayf_Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Schliessanlagen", b =>
                {
                    b.Navigation("Aussenzylinder_Rundzylinder");

                    b.Navigation("Hebelzylinder");

                    b.Navigation("Profil_Doppelzylinder");

                    b.Navigation("Profil_Halbzylinder");

                    b.Navigation("Profil_Knaufzylinder");

                    b.Navigation("Vorhangschloss");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.User", b =>
                {
                    b.Navigation("UserOrdersShop");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Users.UserOrdersShop", b =>
                {
                    b.Navigation("ProductSysteam");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.OptionsVorhan", b =>
                {
                    b.Navigation("Options_value");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhan.Vorhan_Options", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("schliessanlagen_konfigurator.Models.Vorhangschloss", b =>
                {
                    b.Navigation("Size");

                    b.Navigation("Vorhan_Options");
                });
#pragma warning restore 612, 618
        }
    }
}
